{"ast":null,"code":"var _jsxFileName = \"/home/armen/Desktop/TODO-LIST-useContext/src/mode/themContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from \"react\";\nimport { darkTheme, lightTheme } from \"./Theme\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\nexport function ThemeProvider({\n  children\n}) {\n  _s();\n  const [theme, setTheme] = useState(lightTheme);\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === lightTheme ? darkTheme : lightTheme);\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_s(ThemeProvider, \"6L2zWgcMHVbQNW802fiQDNRx9N0=\");\n_c = ThemeProvider;\nexport function useTheme() {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","darkTheme","lightTheme","jsxDEV","_jsxDEV","ThemeContext","undefined","ThemeProvider","children","_s","theme","setTheme","toggleTheme","prevTheme","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["/home/armen/Desktop/TODO-LIST-useContext/src/mode/themContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from \"react\";\nimport { darkTheme, lightTheme, Theme } from \"./Theme\";\n\ntype ThemeContextType = {\n  theme: Theme;\n  toggleTheme: () => void;\n};\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\ntype ThemeProviderProps = {\n  children: ReactNode;\n};\n\nexport function ThemeProvider({ children }: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(lightTheme);\n\n  const toggleTheme = () => {\n    setTheme((prevTheme) =>\n      prevTheme === lightTheme ? darkTheme : lightTheme\n    );\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAmB,OAAO;AAC7E,SAASC,SAAS,EAAEC,UAAU,QAAe,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOvD,MAAMC,YAAY,gBAAGP,aAAa,CAA+BQ,SAAS,CAAC;AAM3E,OAAO,SAASC,aAAaA,CAAC;EAAEC;AAA6B,CAAC,EAAE;EAAAC,EAAA;EAC9D,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAQE,UAAU,CAAC;EAErD,MAAMU,WAAW,GAAGA,CAAA,KAAM;IACxBD,QAAQ,CAAEE,SAAS,IACjBA,SAAS,KAAKX,UAAU,GAAGD,SAAS,GAAGC,UACzC,CAAC;EACH,CAAC;EAED,oBACEE,OAAA,CAACC,YAAY,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEL,KAAK;MAAEE;IAAY,CAAE;IAAAJ,QAAA,EAClDA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B;AAACV,EAAA,CAdeF,aAAa;AAAAa,EAAA,GAAbb,aAAa;AAgB7B,OAAO,SAASc,QAAQA,CAAA,EAAG;EAAAC,GAAA;EACzB,MAAMC,OAAO,GAAGxB,UAAU,CAACM,YAAY,CAAC;EACxC,IAAIkB,OAAO,KAAKjB,SAAS,EAAE;IACzB,MAAM,IAAIkB,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB;AAACD,GAAA,CANeD,QAAQ;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}